function reconimg = ksp2img(mixsamp,opts,cmap)
% Convert 4F phantom k-space to images
%   
%   INPUTS:
%       mixsamp [nx, ny, nc, nz, nt] -> 4D phantom in k-space with phase accumulation and noise
%       opts    [struct]             -> structure for gridding non-Cartesian k-space with the NUFFT
%       cmap    [nx, ny, nc, nz]     -> coil sensitivity maps generated by gencmap.m
%
%   OUTPUT:
%       reconimg [nx, ny, nz, nt] -> 4D phantom images
%
% -----------------------------------------------------------------------------------------
% Realistic 4D abdominal phantom for magnetic resonance imaging
% Wei-Ching Lo
% wxl317@case.edu
% Case Western Reserve University
% April 2018
% -----------------------------------------------------------------------------------------

[nr, np, nc , npar, nt] = size(mixsamp);
mtx = opts.N;
ksp2immask = true(mtx,mtx, npar);
reconimg = zeros(mtx,mtx,npar,nt,'single');
if strcmp(opts.trajectory,'cartesian')
    ktemp = ifft1n(mixsamp,4);
    imgtemp = ifft2n(ktemp,1,2);
    for itp = 1:nt
        reconimg(:,:,:,itp) = squeeze(sum(conj(cmap).*imgtemp(:,:,:,:,itp),4)); % coil combination
    end   
else
    imgtemp = zeros(mtx,mtx,npar,nc,nt,'single');
    for itp = 1:nt  
        for c = 1:nc
            x = zeros(nr,np,npar,'single');
            x = mixsamp(:,:, c,:,itp);
            imgtemp(:,:,:, c,itp) = embed(opts.G'*(opts.wib.*x(:)),ksp2immask);
        end
        reconimg(:,:,:,itp) = squeeze(sum(conj(cmap).*imgtemp(:,:,:,:,itp),4)); % coil combination
    end
end
